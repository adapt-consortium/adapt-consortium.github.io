{"version":3,"sources":["adapt/vfgsearch/search.cljc"],"mappings":";AAOA,uCAAA,vCAAMA,sFACHC;AADH,AAEE,OAACC,8CAAMC,kBAAUF;;AAEnB,AAAKG,4CAAmB,AAACC,kBAAQL;AAGjC,iCAAA,jCAAMM,0EACHL,OAAOM,aAAaC;AADvB,AAEE,IAAMC,eAAa,AAACC,gCAAgBF,gBAAgBP;AAApD,AACE,kBAAA,2CAAA,0FAAA,gHAAA,vQAACU,uIAAkCH,gHACAA,qFACAC;;AACnC,wFACK,AAACG,oDAAY,WAAKC,IAAIC,lIAEtB,AAACE,gDAAQC,lEACTC;AAHa,AAAA,0FACGL,IAAIC,YAAY,AAACC,6CAA6BN,aAAaK;GAF3EP;;AAOT,gCAAA,hCAAMa,wEACHC,MAAMC,KAAKd;AADd,AAAA,GAES,AAACe,qBAAKF;AAFf;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAAA,GAGS,0BAAA,iFAAA,oDAAA,/JAACK,oOAAqBF;AAH/B;AAAA,AAAA,MAAA,KAAAH,MAAA;;;AAAA,GAIS,AAACM,sBAAMjB;AAJhB;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AAKE,OAACb,+BAAQ,AAAA,wFAAS,CAACgB,qCAAAA,4CAAAA,TAAKD,wBAAAA,SAAQ,AAAA,mGAAe,CAACC,qCAAAA,4CAAAA,TAAKD,wBAAAA,SAAQb","names":["adapt.vfgsearch.search/corpus-tokens","corpus","cljs.core.apply","clojure.set/union","adapt.vfgsearch.search/corpus-tokens-memo","cljs.core/memoize","adapt.vfgsearch.search/search_","tagged-pages","tokenised-query","tagged-query","adapt.vfgsearch.wtagging/tf-idf","cljs.core/tap>","cljs.core.map_indexed","idx","tagged-page","adapt.vfgsearch.similarity/cosine-similarity","cljs.core.sort_by","cljs.core/last","cljs.core/reverse","js/Error","adapt.vfgsearch.search/search","state","lang","cljs.core/map?","cljs.core/contains?","cljs.core/coll?"],"sourcesContent":["(ns adapt.vfgsearch.search\n  \"Functions related to searching.\"\n  (:require [adapt.vfgsearch.wtagging :as wtagging]\n            [adapt.vfgsearch.similarity :as similarity]\n            [clojure.set :as set]))\n\n\n(defn corpus-tokens\n  [corpus]\n  (apply set/union corpus))\n\n(def corpus-tokens-memo (memoize corpus-tokens))\n\n\n(defn search_\n  [corpus tagged-pages tokenised-query]\n  (let [tagged-query (wtagging/tf-idf tokenised-query corpus)]\n    (tap> {:tokenised-query            tokenised-query\n           :corpusised-tokenised-query tokenised-query\n           :tagged-query               tagged-query})\n    (->> tagged-pages\n         (map-indexed (fn [idx tagged-page]\n                        [idx tagged-page (similarity/cosine-similarity tagged-query tagged-page)]))\n         (sort-by last)\n         reverse)))\n  \n\n(defn search\n  [state lang tokenised-query]\n  {:pre [(map? state)\n         (contains? #{:sv :en} lang)\n         (coll? tokenised-query)]}\n  (search_ (:corpus (lang state)) (:tagged-pages (lang state)) tokenised-query))\n \n\n\n\n"]}