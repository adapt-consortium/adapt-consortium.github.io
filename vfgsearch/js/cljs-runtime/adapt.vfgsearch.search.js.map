{"version":3,"sources":["adapt/vfgsearch/search.cljc"],"mappings":";AAOA,uCAAA,vCAAMA,sFACHC;AADH,AAEE,OAACC,8CAAMC,kBAAUF;;AAEnB,AAAKG,4CAAmB,AAACC,kBAAQL;AAGjC,AAAA,gCAAA,wCAAAM,xEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMD,yEACFP,OAAOS,aAAaC;AADxB,AAEG,IAAMC,eAAa,AAACC,gCAAgBF,gBAAgBV;AAApD,AACE,kBAAA,2CAAA,0FAAA,gHAAA,vQAACa,uIAAuBH,gHACWA,qFACdC;;AACrB,wFACK,AAACG,oDAAY,WAAKC,IAAIC,lIAEtB,AAACE,gDAAQC,lEACTC;AAHa,AAAA,0FACGL,IAAIC,YAAY,AAACC,6CAA6BN,aAAaK;GAF3EP;;;AANV,CAAA,8DAAA,9DAAMF,yEAWFc,MAAMX;AAXV,AAAA,GAYU,AAACY,qBAAKD;AAZhB;AAAA,AAAA,MAAA,KAAAb,MAAA;;;AAAA,GAaU,AAACe,sBAAMb;AAbjB;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAcG,OAACgB,4DAAO,AAAA,wFAASH,OAAO,AAAA,0GAAkBA,OAAOX;;;AAdpD,CAAA,wDAAA,xDAAMH;;AAAN","names":["adapt.vfgsearch.search/corpus-tokens","corpus","cljs.core.apply","clojure.set/union","adapt.vfgsearch.search/corpus-tokens-memo","cljs.core/memoize","var_args","G__41981","adapt.vfgsearch.search/search","js/Error","tagged-pages","tokenised-query","tagged-query","adapt.vfgsearch.wtagging/tf-idf","cljs.core/tap>","cljs.core.map_indexed","idx","tagged-page","adapt.vfgsearch.similarity/cosine-similarity","cljs.core.sort_by","cljs.core/last","cljs.core/reverse","state","cljs.core/map?","cljs.core/coll?","adapt.vfgsearch.search.search"],"sourcesContent":["(ns adapt.vfgsearch.search\n  \"Functions related to searching.\"\n  (:require [adapt.vfgsearch.wtagging :as wtagging]\n            [adapt.vfgsearch.similarity :as similarity]\n            [clojure.set :as set]))\n\n\n(defn corpus-tokens\n  [corpus]\n  (apply set/union corpus))\n\n(def corpus-tokens-memo (memoize corpus-tokens))\n\n\n(defn search \n  ([corpus tagged-pages tokenised-query]\n   (let [tagged-query (wtagging/tf-idf tokenised-query corpus)]\n     (tap> {:tokenised-query tokenised-query\n            :corpusised-tokenised-query tokenised-query\n            :tagged-query tagged-query})\n     (->> tagged-pages\n          (map-indexed (fn [idx tagged-page]\n                         [idx tagged-page (similarity/cosine-similarity tagged-query tagged-page)]))\n          (sort-by last)\n          reverse)))\n  ([state tokenised-query]\n   {:pre [(map? state)\n          (coll? tokenised-query)]}\n   (search (:corpus state) (:tagged-en-pages state) tokenised-query)))\n \n\n\n\n"]}