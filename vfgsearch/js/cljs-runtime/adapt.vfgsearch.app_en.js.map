{"version":3,"sources":["adapt/vfgsearch/app_en.cljs"],"mappings":";AAMA,GAAA,QAAAA,kCAAAC,4CAAAC,mDAAAC;AAAA;AAAA,AAAA,AAASC,sCAAa,gDAAA,hDAACC;;AAEvB,wCAAA,xCAAMC;AAAN,AAEE,YAAA,AAAAC,RAAMC,wBAA0BJ;IAC1BK,YAAyB,+DAAA,/DAACC,kCAAkBC,4EAAcH;+BADhE,3BAEMI;AAFN,AAAA,0FAAA,mDAIG,iBAAMC,IAAE,AAACC,gBAAML;AAAf,AAAA,0FAAA,uEAAA,FACiBI,cACd,gJAAA,9IAAI,CAAGA,IAAED,2BAA0B,CAAA,+FAAA,1BAA8BA;KANvE,mFAAA,gDAOQ,AAACG,6CAAKH,yBAAyBH;;AAEzC,8BAAA,9BAAMQ;AAAN,AAAA,0FAAA,uFAAA,mFAAA,6QAAA,mFAAA,0GAAA,mFAAA,gDAAA,2CAAA,qDAAA,qBAAA,sEAAA,mFAAA,kDAAA,yFAAA,mFAAA,gEAAA,gNAAA,2BAAA,mFAAA,kHAAA,gDAAA,mFAAA,sDAAA,2CAAA,qDAAA,sDAAA,mEAAA,kDAAA,sEAAA,AAAAV,qDAAA,wDAAA,+KAAA,6DAAA,WAAAS,ztCAMqF,AAACF,gBAAM,AAAA,4FAAYH,yxBAI3EP;AAV7B,AAY6B,OAACc,sBAAOd,oCAAa,AAAA,AAAAY;mBAZlD,mFAaKV;;AAGL,+BAAA,/BAAuBa;AAAvB,AAEE,wDAAA,jDAACC,oIAAaH,oCAAM,wBAAA,xBAAiBI;;AAKvC,8BAAA,9BAAeC;AAAf,AAEE,OAACH;;;AAGH,8BAAA,9BAAwBI;AAAxB,AAEE,mBAAA,ZAACC","names":["js/adapt","js/adapt.vfgsearch","js/adapt.vfgsearch.app-en","js/adapt.vfgsearch.app-en.search-words","adapt.vfgsearch.app-en/search-words","reagent.core.atom","adapt.vfgsearch.app-en/search-results","cljs.core/deref","query","html-list","adapt.vfgsearch.ui/search-results","adapt.vfgsearch.data-en/data","max-search-results-shown","n","cljs.core/count","cljs.core.take","p1__41986#","adapt.vfgsearch.app-en/page","cljs.core/reset!","adapt.vfgsearch.app-en/start","reagent.dom.render","js/document","adapt.vfgsearch.app-en/init","adapt.vfgsearch.app-en/stop","js/console.log"],"sourcesContent":["(ns adapt.vfgsearch.app-en\n  (:require  [reagent.core :as r]\n             [reagent.dom :as rdom]\n             [adapt.vfgsearch.data-en :as data]\n             [adapt.vfgsearch.ui :as ui]))\n\n(defonce search-words (r/atom \"\"))\n\n(defn search-results \n  []\n  (let [query                    @search-words\n        html-list                (ui/search-results data/data :en query)\n        max-search-results-shown 40]\n    [:div\n     (let [n (count html-list)]\n       [:span.text-sm n \" matches.\"\n        (if (> n max-search-results-shown) (str \" Displaying the first \" max-search-results-shown \".\") \"\")])\n     [:ol (take max-search-results-shown html-list)]]))\n\n(defn page\n  []\n  [:div.container.mx-auto ;; https://umeshmk.github.io/Tailwindcss-cheatsheet/ is a handy cheatsheet for TailwindCSS\n   [:div.prose.prose-a:text-blue-600.prose-a:no-underline.hover:prose-a:underline.font-serif.antialiased.leading-snug\n    [:p.text-xs.text-right.underline [:a {:href \"index.html\"} \"\ud83c\uddf8\ud83c\uddea Svenskspr\u00e5kig version\"]]\n    [:h1 \"A demo of a simple alternative search over over Sweden's Welfare Guide website\"]\n    [:p.text-sm \"(Based on a term-frequency analysis of the English translation of \" (count (:page-urls data/data)) \" scraped pages.)\"]\n    [:p.text-xl.text-indigo-700.font-bold \"Type words (of three or more letters)\"]\n    [:input {:type          :text\n             :placeholder   \"Search... (type words of three or more letters)\"\n             :initial-value @search-words\n             :class         \"px-3 py-3 placeholder-blueGray-300 text-blueGray-500 relative bg-white bg-white rounded text-sm border border-blueGray-300 outline-none focus:outline-none focus:ring w-full\"\n             :on-input      #(reset! search-words (.. % -target -value))}]\n    [search-results]]])\n\n;; called by init and after code reloading finishes\n(defn ^:dev/after-load start\n  []\n  (rdom/render [page] (.getElementById js/document \"app\")))\n\n;; init is called ONCE when the page loads\n;; this is called in the index.html and must be exported\n;; so it is available even in :advanced release builds\n(defn ^:export init\n  []\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop\n  []\n  (js/console.log \"stop\"))\n"]}