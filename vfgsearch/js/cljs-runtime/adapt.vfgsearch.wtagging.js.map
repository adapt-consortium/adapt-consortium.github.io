{"version":3,"sources":["adapt/vfgsearch/wtagging.cljc"],"mappings":";AAKA,0CAAA,1CAAMC,4FACHC,EAAEC;AADL,AAAA,GAES,OAASD;AAFlB;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAAA,GAGS,AAACI,qBAAKD;AAHf;AAAA,AAAA,MAAA,KAAAH,MAAA;;;gEAIO,gFAAA,hFAACK,mDAAU,AAACC,0BAAeJ,7IAC3B,OAACK,+CAAOJ;;AAGf,0CAAA,1CAAMK,4FACHC,KAAKN;AADR,AAAA,GAES,AAACO,qBAAKD;AAFf;AAAA,AAAA,MAAA,KAAAT,MAAA;;;AAGE,IAAMW,QAAM,+EAAK,oDAAA,pDAACC,+CAAOH,5GACR,AAACI,4CAAIC,9DACLC;IACXC,OAAM,kDAAA,lDAACC,sDAAaN;AAH1B,AAIE,OAACV,wCAAee,KAAKb;;AAGzB,sCAAA,tCAAOe,oFACJC;AADH,AAAA,GAES,AAACC,4BAAYD;AAFtB;AAAA,AAAA,MAAA,KAAAnB,MAAA;;;AAGE,IAAMqB,QAAM,AAACC,sBAAYH;IACnBI,aAAW,AAACC,gBAAML;AADxB,uFAGO,AAACN,4CAAI,WAAAY,9IAEL,oDAAA,7CAACK;AAFI,AAAA,IAAAJ,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAME;gBAAN,AAAAD,4CAAAD,WAAA,IAAA,vEAAWG;AAAX,AAAA,0FACGD,KAAK,CAAGC,YAAUN;GAF1BF;;AAKT,6CAAA,7CAAOU,kGACJH,KAAKI;AADR,AAAA,GAES,OAASJ;AAFlB;AAAA,AAAA,MAAA,KAAA5B,MAAA;;;AAAA,GAGS,AAACoB,4BAAYY;AAHtB;AAAA,AAAA,MAAA,KAAAhC,MAAA;;;AAIE,IAAMiC,qBAAmB,AAACT,gBAAM,+CAAA,WAAAU,1DAACC;AAAD,AAAS,QAAAD,iDAAAA,uDAAAA,RAAGN,mCAAAA;GAAMI;AAAlD,AACE,GAAI,sBAAA,rBAAGC;kBACD,AAACT,gBAAMQ,jBACP,2BAAGC,pCACHG,RACA,QAAA,2DAAA;;AAJN;;;AAOJ,kCAAA,lCAAMC,4EACHC,WAAWN;AADd,uFAGO,AAACnB,4CAAI,WAAA0B,9IAEL,oDAAA,7CAACT;AAFI,AAAA,IAAAU,aAAAD;WAAA,AAAAZ,4CAAAa,WAAA,IAAA,lEAAMZ;WAAN,AAAAD,4CAAAa,WAAA,IAAA,lEAAWC;AAAX,AAAA,0FACGb,KAAK,CAAGa,OAAK,AAACV,2CAAkBH,KAAKI;GAF7C,AAACd,oCAAWoB;;AAMnB","names":["js/Error","adapt.vfgsearch.wtagging/tokenised-text","s","stopwords","cljs.core/set?","clojure.string.split","clojure.string/lower-case","cljs.core.remove","adapt.vfgsearch.wtagging/tokenised-page","page","cljs.core/map?","texts","cljs.core.dissoc","cljs.core.map","cljs.core/second","cljs.core/flatten","text","clojure.string.join","adapt.vfgsearch.wtagging/term-freqs","tokens","cljs.core/sequential?","freqs","cljs.core/frequencies","term-count","cljs.core/count","p__52137","vec__52138","cljs.core.nth","term","frequency","cljs.core.into","adapt.vfgsearch.wtagging/inverse-doc-freqs","corpus","docs-matching-term","p1__52141#","cljs.core.filter","Math/log","adapt.vfgsearch.wtagging/tf-idf","doc-tokens","p__52143","vec__52144","freq"],"sourcesContent":["(ns adapt.vfgsearch.wtagging\n  \"Functions related to assigning weighted tags to pages, based on term-frequency.\"\n  (:require [clojure.string :as str]))\n\n\n(defn tokenised-text \n  [s stopwords]\n  {:pre [(string? s)\n         (set? stopwords)]}\n  (->> (str/split (str/lower-case s) #\"[^a-z\u00e4\u00f6\u00fc\u00e1\u00e9\u00ed\u00f3\u00fa\u00e3\u00e2\u00ea\u00ee\u00f4\u00fb\u00e0\u00e8\u00ec\u00f2\u00f9\u00e7\u00f1]+\")\n       (remove stopwords)))\n\n\n(defn tokenised-page\n  [page stopwords]\n  {:pre [(map? page)]}\n  (let [texts (->> (dissoc page :href)\n                   (map second)\n                   flatten)\n        text  (str/join \" \" texts)]\n    (tokenised-text text stopwords)))\n\n\n(defn- term-freqs\n  [tokens]\n  {:pre [(sequential? tokens)]}\n  (let [freqs (frequencies tokens)\n        term-count (count tokens)]\n    (->> freqs\n         (map (fn [[term frequency]]\n                [term (/ frequency term-count)]))\n         (into {}))))\n\n(defn- inverse-doc-freqs\n  [term corpus]\n  {:pre [(string? term)\n         (sequential? corpus)]}\n  (let [docs-matching-term (count (filter #(% term) corpus))]\n    (if (> docs-matching-term 0)\n      (-> (count corpus)\n          (/ docs-matching-term)\n          Math/log\n          (+ 1))\n      1.0)))\n\n(defn tf-idf\n  [doc-tokens corpus]\n  (->> (term-freqs doc-tokens)\n       (map (fn [[term freq]]\n              [term (* freq (inverse-doc-freqs term corpus))]))\n       (into {})))\n\n\n(comment\n\n  \n  (term-freqs [\"a\" \"b\" \"b\" \"c\" \"c\" \"c\"])\n\n  (let [corpus\n        [#{\"clojure\" \"pretty\" \"nice\" \"language\"}\n         #{\"scala\" \"nice\" \"type\" \"system\"}\n         #{\"rust\" \"nice \" \"borrow\" \"checker\"}]]\n    {\"clojure\" (inverse-doc-freqs \"clojure\" corpus)\n     \"nice\" (inverse-doc-freqs \"nice\" corpus)})\n    \n  (let [corpus\n        [#{\"clojure\" \"pretty\" \"nice\" \"language\"}\n         #{\"scala\" \"nice\" \"type\" \"system\"}\n         #{\"rust\" \"nice \" \"borrow\" \"checker\"}]]\n    (tf-idf [\"go\" \"verbose\" \"language\" \"type\" \"system\"] corpus))\n  \n  )"]}