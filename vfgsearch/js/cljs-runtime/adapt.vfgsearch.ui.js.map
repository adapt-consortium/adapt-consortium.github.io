{"version":3,"sources":["adapt/vfgsearch/ui.cljc"],"mappings":";AAMA,+BAAA,/BAAKA;AAEL,8BAAA,9BAAMC,oEACHC,EAAEC;AADL,AAEE,IAAMC,KAAS,kDAAA,lDAACC,sDAAc,AAACC,mDAAUJ,EAAEF;IACrCO,uBAAS,AAACC,cAAIL;AADpB,AAGO,mDAAA,WAAAM,vDAACC;AAAD,AAAM,IAAMC,iBAAG,0BAAAF,1BAACG;AAAV,AACE,GAAI,AAACC,0BAAUN,qBAASI;AAAxB,0FAAA,kFACuBA;;AACrBA;;GAJVP;;AAMT,wCAAA,xCAAMU,wFACHC,wBAAwBC,KAAKC;AADhC,AAEE,IAAAC,aAA6DH;IAA7DG,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAcG;YAAd,AAAAD,4CAAAF,eAAA,nEAAuBI;aAAvB,AAAAF,4CAAAF,eAAA,pEAA6BK;oBAA7B,AAAAH,4CAAAF,eAAA,3EAAoCM;eAApC,AAAAJ,4CAAAF,eAAA,tEAAkDO;IAC5CC,eAAa,AAACC,eAAKH;IACnBI,eAAa,AAACC,kBAAQ,AAACC,gDAAQC,gBAAMd;AAF3C,AAAA,0FAAA,gDAAA,mFAAA,gDAAA,2CAAA,wPAAA,mFAAA,tRAIc,AAACe,4CAAIhB,KAAKK,kBAAW,oDAAA,PAAKC,yDAAYC,yYAG5C,AAACb,4CAAI,WAAKuB,3RACV,kDAAA,mFAAA,iFAAA,tNAAC5B;AADI,AAAA,0FAAA,iFAAmC,AAACJ,4BAASgC,QAAQP;cAPlE,mFAAA,wDAAA,mFAAA,iGAAA,1UAMQD,qZAMA,AAACf,4CAAI,WAAKwB,7GAUV,kDAAA,lDAAC7B;AAVI,AACE,IAAM8B,cAAY,gBACK,+CAAA,WAAAC,1DAACC,hBACDE;AADA,AAAS,kDAAAH,3CAACE,+BAAcJ;GADxBN;IAGjBY,MAAI,AAACC,sDAAaP,YAAYC;IAC9BO,MAAI,CAAGF,MAAI,AAACT,gBAAMI;AAJxB,AAAA,0FAAA,kKAAA,mFAAA,rJAMG,yDAAA,zDAACQ,6CAAKT,gBAAcM,2MACkBL,oBACtC,AAACQ,6CAAKT,YAAYQ;GAV5BhB;;AAcV,6BAAA,7BAAMkB,kEACHC,KAAKC,YAAYC;AADpB,AAEE,QAAA,JAAMC;IACAC,YAAU,iBAAAC,kBAAK,CAAGJ,cAAYE;IAApBG,kBAAA;AAAA,AAAA,SAAAD,kBAAAC,mBAAAD,kBAAAC;;IACVC,UAAQ,iBAAAC,kBAAK,CAAA,CAAGP,cAAYC,cAAWC;IAA/BM,kBAAkC,AAACvB,gBAAMc;AAAzC,AAAA,SAAAQ,kBAAAC,mBAAAD,kBAAAC;;AAFd,AAGE,OAACX,6CAAKE,KAAKI,UAAUG;;AAGzB,8BAAA,9BAAMG,oEACHC,OAAOpD;AADV,AAEE,IAAMqD,sBAAQ,AAACC,cAAIF;AAAnB,AACE,UAAA,NAAOG;IACAC,eAAaxD;;AADpB,AAEE,GAAI,EAAI,AAACyD,uBAAOD,mBACR,yBAAA,xBAAI,AAAC7B,gBAAM4B;AACjBA;;AACA,IAAMd,OAAK,AAACN,gBAAMqB;IACZE,mBAAK,iBAAOC,YAAiBJ;IACjBK,mBAAiBP;;AADxB,AAEE,GAAI,EAAI,AAACI,uBAAOG,uBACR,+BAAA,9BAAI,AAACjC,gBAAMgC;AACjBA;;AACA,IAAME,QAAY,AAAC1B,gBAAMyB;IACnBlB,cAAY,AAACL,sDAAa,AAAC7B,0BAAeiC,MAAMoB;IAChDC,yBAAY,kBAAIpB,aACF,AAACqB,6CAAKJ,UAAU,AAACnB,2BAAQC,KAAKC,YAAY,AAACf,gBAAMkC,SACjDF;AAJpB,AAKE,eAAOG;eACA,AAACE,eAAKJ;;;;;;;;AAZ9B,AAaE,eAAOF;eACA,AAACM,eAAKR;;;;;;;;AAGvB,6CAAA,7CAAMS,kGACHC,cAAc1C,aAAa2C;AAD9B,AAEE,IAAAC,aAAqCF;eAArC,AAAAtC,4CAAAwC,WAAA,IAAA,tEAAOnD;kBAAP,AAAAW,4CAAAwC,WAAA,IAAA,zEAAgBC;cAAhB,AAAAzC,4CAAAwC,WAAA,IAAA,rEAA4BE;IACtBlD,gBAA+B,mFAAK,AAACmD,sBAAYF,YAAY7C,nGACzB,AAACE,gDAAQ8C,lEACT/C;IACpCgD,OAA+B,AAAC7C,4CAAIuC,MAAMlD;IAC1CyD,0JAAoC,oDAAA,pDAACC,+CAAOF,9DACRG,lBACAC,pEACA,oEAAA,kBAAA,tFAACC,+CAAOC,xFACR,AAAC5B,4BAAS3B;AATpD,AAAA,kDAAA,uEAAA,4JAAA,rKAakBP,+DACA,eAAA,AAAA,gFAAIwD,/FAASO,8JACb,iBAAMlF,IAAU,gBAAA,AAAA,sFAAI2E,tGAAatC;IAC3B8C,YAAU,wDAAA,xDAAC5C,sDAAavC;AAD9B,AAEE,OAACyC,6CAAKzC,EAAE,CAAA,MAAKmF;KAjBjC,qFAAA,dAkBkB7D,yEACAsD;;AAEpB,2CAAA,3CAAMQ,8FACHhB,cAAc1C;AADjB,AAEE,IAAA2D,aAAsCjB;gBAAtC,AAAAtC,4CAAAuD,WAAA,IAAA,vEAAOC;kBAAP,AAAAxD,4CAAAuD,WAAA,IAAA,zEAAiBd;cAAjB,AAAAzC,4CAAAuD,WAAA,IAAA,rEAA6Bb;AAA7B,AACC,2EAAA,nEAAG,AAAC3C,gBAAM,AAAC4C,sBAAYF,YAAY7C;;AAEtC,oCAAA,pCAAM6D,gFACHC,MAAMC;AADT,AAEE,IAAM1E,kBACqB,+CAAA,WAAA2E,1DAACvD;AAAD,AAAS,6CAAA,rCAAI,gBAAAuD,hBAAC7D;GADd,AAACzB,mDAAUqF,MAAM3F;IAEtC6F,qBAAmB,AAACnF,4CAAIE,0BAAeK;IACvC6E,6BAA2B,uIAAK,iBAAAC,qBAAA,0DAAAC,lHAIAf,pEACA,oEAAA,pEAACC,+CAAOC,hGACRwC;AANA,AAAA,YAAA1B,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA+0EW,AAAA4B,sBAAAjC;IA/0EXM,qBAAA,AAAAvE,gBAAAsE;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,mBAAA,AAAAI,eAAAL,gBAAAI,9CAAMQ;AAAN,AAAA,AAAA,AAAAN,uBAAAJ,SACE,iBAAAR,qBAAA;+EAAAoB;AAAA,AAAA,YAAAlB,kBAAA,KAAA;;AAAA,AAAA,IAAAkB,eAAAA;;AAAA,AAAA,IAAAjB,yBAAA,AAAAC,cAAAgB;AAAA,AAAA,GAAAjB;AAAA,AAAA,IAAAiB,eAAAjB;AAAA,AAAA,GAAA,AAAAE,6BAAAe;AAAA,IAAAd,sBA80ES,AAAA4B,sBAAAd;IA90ETb,yBAAA,AAAAvE,gBAAAsE;IAAAe,WAAA,AAAAZ,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAe,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAf;AAAA,kBAAA,AAAAI,eAAAL,oBAAAgB,jDAAMlF;AAAN,AAAA,AAAA,AAAAwE,uBAAAS,SACE,4DAAA,aAAA,vEAAM,AAAC9E,+BAAc2E,aAAa9E,cAChC8E;;AAFJ,eAAA,CAAAI,WAAA;;;;AAAA;;;;;AAAA,OAAAT,qBAAA,AAAAC,gBAAAO,UAAA,AAAAE,8DAAA,AAAAP,qBAAAI;;AAAA,OAAAP,qBAAA,AAAAC,gBAAAO,UAAA;;;AAAA,kBAAA,AAAA7E,gBAAA4E,9BAAMhF;AAAN,AAAA,OAAA6E,8FAAA,AAAAM,8DAAA,AAAAlD,eAAA+C,5JACE,4DAAA,aAAA,vEAAM,AAAC7E,+BAAc2E,aAAa9E,cAChC8E;;;AAFJ;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAlB,mBAAkBF;;;AADpB,eAAA,CAAAY,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,gDAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,mBAAA,AAAAhE,gBAAAyD,/BAAMiB;AAAN,AAAA,OAAAD,eACE,iBAAAjB,qBAAA;+EAAAwB;AAAA,AAAA,YAAAtB,kBAAA,KAAA;AAAA,AAAA,IAAAsB,eAAAA;;AAAA,AAAA,IAAArB,yBAAA,AAAAC,cAAAoB;AAAA,AAAA,GAAArB;AAAA,AAAA,IAAAqB,eAAArB;AAAA,AAAA,GAAA,AAAAE,6BAAAmB;AAAA,IAAAlB,kBA80ES,AAAA4B,sBAAAV;IA90ETjB,qBAAA,AAAAvE,gBAAAsE;IAAAmB,WAAA,AAAAhB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAmB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnB;AAAA,kBAAA,AAAAI,eAAAL,gBAAAoB,7CAAMtF;AAAN,AAAA,AAAA,AAAAwE,uBAAAa,SACE,4DAAA,aAAA,vEAAM,AAAClF,+BAAc2E,aAAa9E,cAChC8E;;AAFJ,eAAA,CAAAQ,WAAA;;;;AAAA;;;;;AAAA,OAAAb,qBAAA,AAAAC,gBAAAW,UAAA,AAAAE,8DAAA,AAAAX,qBAAAQ;;AAAA,OAAAX,qBAAA,AAAAC,gBAAAW,UAAA;;;AAAA,kBAAA,AAAAjF,gBAAAgF,9BAAMpF;AAAN,AAAA,OAAA6E,8FAAA,AAAAU,8DAAA,AAAAtD,eAAAmD,5JACE,4DAAA,aAAA,vEAAM,AAACjF,+BAAc2E,aAAa9E,cAChC8E;;;AAFJ;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAlB,mBAAkBF;KADpB,AAAAiB,gDAAA,AAAA1C,eAAA4B;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAmB,AAACmB,0CAA0B,AAAA,wFAASxB;;IAOvFkC,YAGqB,4CAAA,WAAAI,vDAACtH;AAAD,AAAM,6CAAAsH,tCAAClH,uDAAqB,AAAA,4FAAY4E,OAAOzE;GAD/C,4CAAA,WAAA8G,vDAACrH;AAAD,AAAM,kDAAAqH,3CAAC1D,4DAA0ByB,2BAA2B,AAAA,2FAAWJ;GADvE,+CAAA,WAAAoC,1DAACzF;AAAD,AAAS,gDAAAyF,zCAACxC,0DAAkBQ;GAD5B,AAAC+B,4DAAcnC,MAAMI;AAVhD,AAcE8B","names":["adapt.vfgsearch.ui/word-spec","adapt.vfgsearch.ui/emphasis","s","targets","xs","cljs.core.interpose","clojure.string.split","targets'","cljs.core/set","p1__43274#","cljs.core.map","s'","clojure.string/lower-case","cljs.core/contains?","adapt.vfgsearch.ui/html-search-result","augmented-search-result","urls","tokenised-query","map__43276","cljs.core/--destructure-map","cljs.core.get","page-idx","title","region","matching-tags","extracts","found-tokens","cljs.core/keys","query-tokens","cljs.core/reverse","cljs.core.sort_by","cljs.core/count","cljs.core.nth","extract","found-token","query-token","p1__43275#","cljs.core.filter","clojure.string/includes?","cljs.core/first","ix1","clojure.string.index_of","ix2","cljs.core.subs","adapt.vfgsearch.ui/extract","text","idx-in-text","token-size","n","from-incl","x__4336__auto__","y__4337__auto__","to-excl","x__4339__auto__","y__4340__auto__","adapt.vfgsearch.ui/extracts","tokens","tokens'","cljs.core/vec","acc","remaining-xs","cljs.core/empty?","acc'","inner-acc","remaining-tokens","token","inner-acc'","cljs.core.conj","cljs.core/rest","adapt.vfgsearch.ui/augmented-search-result","search-result","pages","vec__43277","tagged-page","_scores","cljs.core/select-keys","cljs.core/second","page","extracts_","cljs.core.dissoc","cljs.core/vals","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","cljs.core/last","colon-idx","adapt.vfgsearch.ui/contains-token?","vec__43280","_page-idx","adapt.vfgsearch.ui/search-results","state","query","p1__43283#","lc-tokenised-query","corpusised-tokenised-query","iter__4652__auto__","s__43288","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__43290","cljs.core/chunk-buffer","i__43289","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43287","cljs.core/chunk-rest","cljs.core/cons","corpus-token","adapt.vfgsearch.search/corpus-tokens-memo","s__43292","b__43294","i__43293","iter__43291","s__43296","b__43298","i__43297","iter__43295","cljs.core.distinct","html-list","adapt.vfgsearch.search.search","p1__43284#","p1__43285#","p1__43286#","cljs.core/chunk-first"],"sourcesContent":["(ns adapt.vfgsearch.ui\n  \"Functions related to the user interface.\"\n  (:require [adapt.vfgsearch.search :as search]\n            [clojure.string :as str]))\n\n\n(def word-spec #\"[^a-z\u00e4\u00f6\u00fc\u00e1\u00e9\u00ed\u00f3\u00fa\u00e3\u00e2\u00ea\u00ee\u00f4\u00fb\u00e0\u00e8\u00ec\u00f2\u00f9\u00e7\u00f1A-Z\u00c4\u00d6\u00dc\u00c1\u00c9\u00cd\u00d3\u00da\u00c3\u00c2\u00ca\u00ce\u00d4\u00db\u00c0\u00c8\u00cc\u00d2\u00d9\u00c7\u00d1]+\") \n\n(defn emphasis\n  [s targets]\n  (let [xs       (interpose \" \" (str/split s word-spec)) \n        targets' (set targets)]\n    (->> xs\n         (map #(let [s' (str/lower-case %)]\n                 (if (contains? targets' s')\n                   [:span.font-semibold s']\n                   s'))))))\n\n(defn html-search-result\n  [augmented-search-result urls tokenised-query]\n  (let [{:keys [page-idx title region matching-tags extracts]} augmented-search-result\n        found-tokens (keys matching-tags)\n        query-tokens (reverse (sort-by count tokenised-query))]\n    [:li \n     [:a {:href (nth urls page-idx)} (str title \" - \" region)] \n     [:br]\n     (->> extracts\n          (map (fn [extract] [:span.text-gray-600 (emphasis extract found-tokens)]))\n          (interpose [:span.text-gray-400 \" / \"]))\n     [:br]\n     [:span.text-gray-400.text-sm \"Matching: \"]\n     (->> found-tokens\n          (map (fn [found-token] \n                 (let [query-token (->> query-tokens\n                                        (filter #(str/includes? found-token %))\n                                        first)\n                       ix1 (str/index-of found-token query-token)\n                       ix2 (+ ix1 (count query-token))]\n                   [:span.text-gray-500.text-sm\n                    (subs found-token 0 ix1)\n                    [:span.font-extrabold.text-indigo-700 query-token]\n                    (subs found-token ix2)])))\n          (interpose \" \"))]))\n\n\n(defn extract \n  [text idx-in-text token-size]\n  (let [n 48\n        from-incl (max (- idx-in-text n) 0)\n        to-excl (min (+ idx-in-text token-size n) (count text))]\n    (subs text from-incl to-excl)))\n\n\n(defn extracts\n  [tokens xs]\n  (let [tokens' (vec tokens)]\n    (loop [acc          #{}\n           remaining-xs xs]\n      (if (or (empty? remaining-xs)\n              (>= (count acc) 6))\n        acc\n        (let [text (first remaining-xs)\n              acc' (loop [inner-acc        acc\n                          remaining-tokens tokens']\n                     (if (or (empty? remaining-tokens)\n                             (>= (count inner-acc) 6))\n                       inner-acc\n                       (let [token       (first remaining-tokens)\n                             idx-in-text (str/index-of (str/lower-case text) token)\n                             inner-acc'  (if idx-in-text\n                                           (conj inner-acc (extract text idx-in-text (count token)))\n                                           inner-acc)]\n                         (recur inner-acc'\n                                (rest remaining-tokens)))))] \n          (recur acc'\n                 (rest remaining-xs)))))))\n\n\n(defn augmented-search-result\n  [search-result query-tokens pages]\n  (let [[page-idx tagged-page _scores] search-result\n        matching-tags                  (->> (select-keys tagged-page query-tokens)\n                                            (sort-by second)\n                                            reverse)\n        page                           (nth pages page-idx)\n        extracts_                      (->> (dissoc page :href) ;; page without hrefs\n                                            vals ;; texts\n                                            flatten\n                                            (remove nil?)\n                                            (extracts query-tokens))]\n    #_(tap> {:page-idx page-idx\n           :query-tokens query-tokens\n           :matching-tags matching-tags})\n    {:page-idx      page-idx\n     :title         (-> page :h1 last)\n     :region        (let [s         (-> page :region first)\n                          colon-idx (str/index-of s \": \")]\n                      (subs s (+ 2 colon-idx)))\n     :matching-tags matching-tags\n     :extracts      extracts_}))\n\n(defn contains-token? \n  [search-result query-tokens]\n  (let [[_page-idx tagged-page _scores] search-result] \n   (> (count (select-keys tagged-page query-tokens)) 0)))\n\n(defn search-results ;; ...as an HTML list\n  [state query]\n  (let [tokenised-query (->> (str/split query word-spec)\n                             (filter #(>= (count %) 3)))\n        lc-tokenised-query (map str/lower-case tokenised-query)\n        corpusised-tokenised-query (->> (for [corpus-token (search/corpus-tokens-memo (:corpus state))]\n                                          (for [query-token lc-tokenised-query]\n                                            (when (str/includes? corpus-token query-token)\n                                              corpus-token)))\n                                        flatten\n                                        (remove nil?)\n                                        distinct)\n        html-list       (->> (search/search state corpusised-tokenised-query)\n                             (filter #(contains-token? % corpusised-tokenised-query))\n                             (map #(augmented-search-result % corpusised-tokenised-query (:en-pages state)))\n                             (map #(html-search-result % (:page-urls state) tokenised-query)))] \n    html-list))\n\n\n\n\n\n\n\n"]}